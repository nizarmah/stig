version: "3"

# common properties
x-common: &common
  tty: true
  stdin_open: true

services:
  game-play:
    <<: *common
    build:
      context: ./game
      dockerfile: docker/play/Dockerfile
    env_file:
      - ./game/env/.env
      - ./game/env/play/.env
    # Allow container to connect to host machine.
    # Needed for the game client to connect to the browser.
    network_mode: host
    volumes:
      - ./assets:/app/assets

  game-record:
    <<: *common
    build:
      context: ./game
      dockerfile: docker/record/Dockerfile
    env_file:
      - ./game/env/.env
      - ./game/env/record/.env
    # Allow container to connect to host machine.
    # Needed for the game client to connect to the browser.
    network_mode: host
    volumes:
      - ./assets:/app/assets

  track-train:
    build:
      context: .
      dockerfile: track/docker/train/Dockerfile
    image: nn-trainer:latest
    profiles: ["dev"]           # keeps it out of prod deployments
    shm_size: "2g"
    volumes:
      # 1) raw frames (read-only)
      - ./assets/recordings:/recordings:ro
      # 2) persistent artefacts
      - ./models:/models
    environment:
      - DATA_ROOT=/recordings
      - MODEL_DIR=/models
      # (optionally) WANDB_API_KEY=â€¦
    # GPU support (uncomment if you used the CUDA base image
    # and have Docker + nvidia-container-toolkit configured)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - capabilities: ["gpu"]

